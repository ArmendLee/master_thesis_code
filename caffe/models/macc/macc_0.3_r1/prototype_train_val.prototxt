name: "macc_0.3_r1"

# Add data layers


# -------------------------------------- NETWORK STRUCTURE --------------------------------------- #
# ---------------------------------------------- x1 ---------------------------------------------- #
layer {
  # -----------------------  FOV 3x3
  name: "conv_x1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv_x1_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x1_1"
  type: "ReLU"
  bottom: "conv_x1_1"
  top: "conv_x1_1"
}
layer {
  # -----------------------  FOV 9x9
  name: "conv_x1_2"
  type: "Convolution"
  bottom: "conv_x1_1"
  top: "conv_x1_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 3
    dilation: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x1_2"
  type: "ReLU"
  bottom: "conv_x1_2"
  top: "conv_x1_2"
}
layer {
  # -----------------------  FOV 23x23
  name: "conv_x1_3"
  type: "Convolution"
  bottom: "conv_x1_2"
  top: "conv_x1_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 7
    kernel_size: 3
    dilation: 7
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x1_3"
  type: "ReLU"
  bottom: "conv_x1_3"
  top: "conv_x1_3"
}
# ---------------------------------------------- x2 ---------------------------------------------- #
layer {
  name: "pool_x2"
  type: "Pooling"
  bottom: "conv_x1_3"
  top: "pool_x2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  # -----------------------  FOV 28x28  (6+22=28)
  name: "conv_x2_1"
  type: "Convolution"
  bottom: "pool_x2"
  top: "conv_x2_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x2_1"
  type: "ReLU"
  bottom: "conv_x2_1"
  top: "conv_x2_1"
}
layer {
  # -----------------------  FOV 40x40  (18+22=40)
  name: "conv_x2_2"
  type: "Convolution"
  bottom: "conv_x2_1"
  top: "conv_x2_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 3
    kernel_size: 3
    dilation: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x2_2"
  type: "ReLU"
  bottom: "conv_x2_2"
  top: "conv_x2_2"
}
# ---------------------------------------------- x4 ---------------------------------------------- #
layer {
  name: "pool_x4"
  type: "Pooling"
  bottom: "conv_x2_2"
  top: "pool_x4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  # -----------------------  FOV 50x50  (12+38=50)
  name: "conv_x4_1"
  type: "Convolution"
  bottom: "pool_x4"
  top: "conv_x4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x4_1"
  type: "ReLU"
  bottom: "conv_x4_1"
  top: "conv_x4_1"
}
layer {
  # -----------------------  FOV 74x74  (36+38=74)
  name: "conv_x4_2"
  type: "Convolution"
  bottom: "conv_x4_1"
  top: "conv_x4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 3
    kernel_size: 3
    dilation: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x4_2"
  type: "ReLU"
  bottom: "conv_x4_2"
  top: "conv_x4_2"
}
layer {
  # -----------------------  FOV 82x82  (44+38=82)
  name: "conv_x4_3"
  type: "Convolution"
  bottom: "conv_x4_2"
  top: "conv_x4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x4_3"
  type: "ReLU"
  bottom: "conv_x4_3"
  top: "conv_x4_3"
}
# ---------------------------------------------- x8 ---------------------------------------------- #
layer {
  name: "pool_x8"
  type: "Pooling"
  bottom: "conv_x4_3"
  top: "pool_x8"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  # -----------------------  FOV 102x102  (24+78=102)
  name: "conv_x8_1"
  type: "Convolution"
  bottom: "pool_x8"
  top: "conv_x8_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x8_1"
  type: "ReLU"
  bottom: "conv_x8_1"
  top: "conv_x8_1"
}
layer {
  # -----------------------  FOV 150x150  (72+78=150)
  name: "conv_x8_2"
  type: "Convolution"
  bottom: "conv_x8_1"
  top: "conv_x8_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 3
    kernel_size: 3
    dilation: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x8_2"
  type: "ReLU"
  bottom: "conv_x8_2"
  top: "conv_x8_2"
}
layer {
  # -----------------------  FOV 166x166  (88+78=166)
  name: "conv_x8_3"
  type: "Convolution"
  bottom: "conv_x8_2"
  top: "conv_x8_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x8_3"
  type: "ReLU"
  bottom: "conv_x8_3"
  top: "conv_x8_3"
}
# --------------------------------------------- x16 ---------------------------------------------- #
layer {
  name: "pool_x16"
  type: "Pooling"
  bottom: "conv_x8_3"
  top: "pool_x16"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  # -----------------------  FOV 206x206  (48+158=206)
  name: "conv_x16_1"
  type: "Convolution"
  bottom: "pool_x16"
  top: "conv_x16_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1024
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x16_1"
  type: "ReLU"
  bottom: "conv_x16_1"
  top: "conv_x16_1"
}
layer {
  # -----------------------  FOV 302x302  (144+158=302)
  name: "conv_x16_2"
  type: "Convolution"
  bottom: "conv_x16_1"
  top: "conv_x16_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1024
    pad: 3
    kernel_size: 3
    dilation: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x16_2"
  type: "ReLU"
  bottom: "conv_x16_2"
  top: "conv_x16_2"
}
layer {
  # -----------------------  FOV 334x334  (176+158=334)
  name: "conv_x16_3"
  type: "Convolution"
  bottom: "conv_x16_2"
  top: "conv_x16_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1024
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x16_3"
  type: "ReLU"
  bottom: "conv_x16_3"
  top: "conv_x16_3"
}
# --------------------------------------------- x32 ---------------------------------------------- #
layer {
  name: "pool_x32"
  type: "Pooling"
  bottom: "conv_x16_3"
  top: "pool_x32"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  # -----------------------  FOV 424x424  (96+318=424)
  name: "conv_x32_1"
  type: "Convolution"
  bottom: "pool_x32"
  top: "conv_x32_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 2048
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x32_1"
  type: "ReLU"
  bottom: "conv_x32_1"
  top: "conv_x32_1"
}
layer {
  # -----------------------  FOV 606x606  (288+318=606)
  name: "conv_x32_2"
  type: "Convolution"
  bottom: "conv_x32_1"
  top: "conv_x32_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 2048
    pad: 3
    kernel_size: 3
    dilation: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x32_2"
  type: "ReLU"
  bottom: "conv_x32_2"
  top: "conv_x32_2"
}
layer {
  # -----------------------  FOV 650x650  (332+318=650)
  name: "conv_x32_3"
  type: "Convolution"
  bottom: "conv_x32_2"
  top: "conv_x32_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 2048
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x32_3"
  type: "ReLU"
  bottom: "conv_x32_3"
  top: "conv_x32_3"
}
# --------------------------------------------- x64 ---------------------------------------------- #
layer {
  name: "pool_x64"
  type: "Pooling"
  bottom: "conv_x32_3"
  top: "pool_x64"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  # -----------------------  FOV 810x810  (192+618=810)
  name: "conv_x64_1"
  type: "Convolution"
  bottom: "pool_x64"
  top: "conv_x64_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x64_1"
  type: "ReLU"
  bottom: "conv_x64_1"
  top: "conv_x64_1"
}
layer {
  # -----------------------  FOV 1194x1194  (576+618=1194)
  name: "conv_x64_2"
  type: "Convolution"
  bottom: "conv_x64_1"
  top: "conv_x64_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    pad: 3
    kernel_size: 3
    dilation: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu_x64_2"
  type: "ReLU"
  bottom: "conv_x64_2"
  top: "conv_x64_2"
}

# ----------------------------------------- ACCUMULATORS ----------------------------------------- #
layer {
  # -----------------------  SCALE 1/1
  # -----------------------  Train to detect bounding boxes up to 10x10 px
  name: "acc_x1"
  type: "Convolution"
  bottom: "conv_x1_3"
  top: "acc_x1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  # -----------------------  SCALE 1/2
  # -----------------------  Train to detect bounding boxes up to 20x20 px
  name: "acc_x2"
  type: "Convolution"
  bottom: "conv_x2_2"
  top: "acc_x2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  # -----------------------  SCALE 1/4
  # -----------------------  Train to detect bounding boxes up to 40x40 px
  name: "acc_x4"
  type: "Convolution"
  bottom: "conv_x4_3"
  top: "acc_x4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  # -----------------------  SCALE 1/8
  # -----------------------  Train to detect bounding boxes up to 80x80 px
  name: "acc_x8"
  type: "Convolution"
  bottom: "conv_x8_3"
  top: "acc_x8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  # -----------------------  SCALE 1/16
  # -----------------------  Train to detect bounding boxes up to 160x160 px
  name: "acc_x16"
  type: "Convolution"
  bottom: "conv_x16_3"
  top: "acc_x16"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  # -----------------------  SCALE 1/32
  # -----------------------  Train to detect bounding boxes up to 320x320 px
  name: "acc_x32"
  type: "Convolution"
  bottom: "conv_x32_3"
  top: "acc_x32"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  # -----------------------  SCALE 1/64
  # -----------------------  Train to detect bounding boxes up to 640x640 px
  name: "acc_x64"
  type: "Convolution"
  bottom: "conv_x64_2"
  top: "acc_x64"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

# --------------------------------------------- LOSS --------------------------------------------- #
layer {
  name: "loss"
  type: "MultiscaleAccumulatorLoss"
  bottom: "label"
  bottom: "acc_x1"
  bottom: "acc_x2"
  bottom: "acc_x4"
  bottom: "acc_x8"
  bottom: "acc_x16"
  bottom: "acc_x32"
  bottom: "acc_x64"
  top: "loss"
  accumulator_loss_param {
    radius: 1
    downsampling: 1
    negative_ratio: 4
  }
}

